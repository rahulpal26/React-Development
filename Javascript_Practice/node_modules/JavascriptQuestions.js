//Create a method each_cons that accepts a list and a number n, and returns cascading subsets of the list of size n, like so:

//each_cons([1,2,3,4], 2)
//  #=> [[1,2], [2,3], [3,4]]

//each_cons([1,2,3,4], 3)
 // #=> [[1,2,3],[2,3,4]]

 //sol function eachCons(array, n) {
	
  //  return  array.map((x,y)=>array.slice(y,y+n)).filter(x=>x.length==n)
  
//}


// Write a program that finds the summation of every number from 1 to num. The
// number will always be a positive integer greater than 0.

// var summation = function (num) {
//     let A=0
//        for (let i=1; i<=num; i++){
//               A +=i
//        }
//           return A 
//   }



// Simple, given a string of words, return the length of the shortest word(s).
// String will never be empty and you do not need to account for different data types.
// function findShort(s){
//     let A= s.split(' ')
//     let lowlen=A[0].length
    
//     for(let i in A){
//       if(A[i].length < lowlen){
//         lowlen=A[i].length;
//       }
//     }
    
//     return lowlen 

function squareOrSquareRoot(array) {

    var newValues = []; 
    for(var i = 0 ; i<array.length ;i++) {
        Number.isInteger(Math.sqrt(array[i]))?newValues.push(Math.sqrt(array[i])):newValues.push(array[i]*array[i]);
    }
    return newValues;
}